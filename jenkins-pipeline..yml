apiVersion: v1
kind: BuildConfig
metadata:
  name: dt-pipeline
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        pipeline {
          agent any
          tools {
              maven 'Maven3.5.4'
          }
          stages {
              stage('Build') {
                  steps {
                      sh 'mvn clean package'
                  }
              }
              stage("Clone Source") {
                  steps {
                    checkout([$class: 'GitSCM',
                                branches: [[name: '*/master']],
                                extensions: [
                                  [$class: 'RelativeTargetDirectory', relativeTargetDir: 'dts']
                                ],
                                userRemoteConfigs: [[url: 'https://github.com/JeffreyZou13/DreamTeamTradingPlatform.git']]
                            ])
                  }
              }
              stage("Build JAR") {
                  steps {
                      dir('dts/DreamBackEnd') {
                          sh 'mvn -Dmaven.test.skip=true clean package'
                      }
                  }
              }
              stage("Create Build For Spring Boot Server") {
                  steps {
                      dir('dts') {
                          sh 'oc new-build --strategy docker --binary --name spring || echo "Build already exists"'
                      }
                  }
              }
              stage("Build Spring Boot Server Image") {
                  steps {
                      dir('dts') {
                          sh 'cp Dockerfile-spring Dockerfile'
                          sh 'oc start-build spring --from-dir . --follow && rm Dockerfile'
                      }
                  }
              }
              stage("Create Build For Database Server") {
                  steps {
                      dir('dts') {
                          sh 'oc new-build --strategy docker --binary --name mysql || echo "Build already exists"'
                      }
                  }
              }
              stage("Build Database Image") {
                  steps {
                      dir('dts') {
                          sh 'cp Dockerfile-mysql Dockerfile'
                          sh 'oc start-build mysql --from-dir . --follow && rm Dockerfile'
                      }
                  }
              }
              stage("Create Build For Angular Server") {
                  steps {
                      dir('dts') {
                          sh 'oc new-build --strategy docker --binary --name angular || echo "Build already exists"'
                      }
                  }
              }
              stage("Build Angular Server Image") {
                  steps {
                      dir('dts') {
                          sh 'cp Dockerfile-angular Dockerfile'
                          sh 'oc start-build angular --from-dir . --follow && rm Dockerfile'
                      }
                  }
              }
              stage("Create persistent storage") {
                  steps {
                      dir('dts') {
                          sh '(oc get PersistentVolumeClaim | grep mysql-claim0) || oc apply -f openshiftnew/mysql-claim0-persistentvolumeclaim.yaml'
                      }
                  }
              }
              stage("Create Deployment Config") {
                  steps {
                      dir('dts') {
                          sh '(oc get deploymentconfig | grep mysql) || oc apply -f openshiftnew/mysql-deploymentconfig.yaml'
                          sh '(oc get deploymentconfig | grep dt) || oc apply -f openshiftnew/dt-deploymentconfig.yaml'
                          sh '(oc get deploymentconfig | grep angular) || oc apply -f openshiftnew/angular-deploymentconfig.yaml'
                          sh 'oc expose svc/dt || echo "dts already exposed"'
                      }
                  }
              }
              stage("Create Services and rollout deployment") {
                  steps {
                      dir('dts') {
                          sh '(oc get svc | grep mysql) || oc apply -f openshiftnew/mysql-service.yaml'
                          sh '(oc get svc | grep dt) || oc apply -f openshiftnew/dt-service.yaml'
                          sh '(oc get svc | grep angular) || oc apply -f openshiftnew/angular-service.yaml'
                      }
                  }
              }
              stage("Create Public route") {
                  steps {
                      dir('dts') {
                          sh '((oc get route | grep dt) && echo "dt already exposed") || oc expose svc/dts'
                          sh 'echo "Internet route is `oc get route | awk \'{print $2}\' | grep dts`"'
                      }
                  }
              }
              stage("Clean up on Isle 4") {
                  steps {
                      dir('dts') {
                          sh 'oc delete pods `oc get pods | grep \'0/1\' | awk \'{print $1}\'`'
                      }
                  }
              }
          }
      }
    type: JenkinsPipeline
  triggers: []